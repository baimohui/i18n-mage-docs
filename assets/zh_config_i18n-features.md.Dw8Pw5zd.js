import{_ as o,c as a,o as i,ae as n}from"./chunks/framework.BtyBuCtj.js";const g=JSON.parse('{"title":"国际化特性配置","description":"","frontmatter":{},"headers":[],"relativePath":"zh/config/i18n-features.md","filePath":"zh/config/i18n-features.md"}'),t={name:"zh/config/i18n-features.md"};function c(l,e,d,r,s,u){return i(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="国际化特性配置" tabindex="-1">国际化特性配置 <a class="header-anchor" href="#国际化特性配置" aria-label="Permalink to &quot;国际化特性配置&quot;">​</a></h1><h2 id="i18n-mage-i18nfeatures-framework" tabindex="-1"><code>i18n-mage.i18nFeatures.framework</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-framework" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.framework`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>enum</code></li><li><strong>默认值</strong>: <code>none</code></li></ul><p>选择使用的国际化框架：如 <code>vue-i18n</code>、<code>react-i18next</code> 等。支持以下选项：</p><ul><li><code>none</code>: 不使用框架，仅使用原生国际化 API</li><li><code>vue-i18n</code>: 使用 <code>vue-i18n</code> 框架</li><li><code>react-i18next</code>: 使用 <code>react-i18next</code> 框架</li><li><code>i18next</code>: 使用 <code>i18next</code> 框架（目前选择该项与 <code>react-i18next</code> 效果相同）</li><li><s><code>vscode-l10n</code>: 使用 <code>vscode-l10n</code> 框架</s></li></ul><h2 id="i18n-mage-i18nfeatures-translationfunctionnames" tabindex="-1"><code>i18n-mage.i18nFeatures.translationFunctionNames</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-translationfunctionnames" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.translationFunctionNames`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>array</code></li><li><strong>默认值</strong>: <code>[&#39;t&#39;]</code></li></ul><p>指定国际化转换函数名称列表，默认为 <code>t</code>。当框架为 <code>vue-i18n</code> 时，会强制启用 <code>t</code> 和 <code>tc</code>。</p><h2 id="i18n-mage-i18nfeatures-namespacestrategy" tabindex="-1"><code>i18n-mage.i18nFeatures.namespaceStrategy</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-namespacestrategy" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.namespaceStrategy`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>enum</code></li><li><strong>默认值</strong>: <code>auto</code></li></ul><p>控制翻译键命名空间的生成策略，支持以下选项：</p><ul><li><p><strong><code>&#39;auto&#39;</code> (自动推断)</strong>:</p><ul><li>自动选择词条使用率不为 0 的命名空间策略</li></ul></li><li><p><strong><code>&#39;full&#39;</code> (完整路径)</strong>:</p><ul><li>使用语言文件的完整相对路径作为命名空间前缀</li><li>路径分隔符（如 <code>/</code>）会被替换为点号（<code>.</code>）</li><li>示例：文件 <code>zh/modules/components.json</code> 会生成前缀 <code>modules.components</code></li><li>适合复杂项目结构，确保键的唯一性</li></ul></li><li><p><strong><code>&#39;file&#39;</code> (仅文件名)</strong>:</p><ul><li>仅使用文件名（不含扩展名）作为命名空间前缀</li><li>示例：文件 <code>zh/modules/components.json</code> 会生成前缀 <code>components</code></li><li>适合简单项目结构，键较短但可能不够唯一</li></ul></li><li><p><strong><code>&#39;none&#39;</code> (无命名空间)</strong>:</p><ul><li>不使用任何命名空间前缀，直接将语言文件内容合并到顶层</li><li>示例：文件 <code>zh/modules/components.json</code> 中的键直接使用，不加前缀</li><li>需要确保所有语言文件中的键全局唯一，否则会发生覆盖</li></ul></li></ul><h2 id="i18n-mage-i18nfeatures-interpolationbrackets" tabindex="-1"><code>i18n-mage.i18nFeatures.interpolationBrackets</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-interpolationbrackets" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.interpolationBrackets`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>enum</code></li><li><strong>默认值</strong>: <code>auto</code></li></ul><p>设置变量插值使用的花括号风格，默认跟随所选国际化框架（如 <code>vue-i18n</code> 用单花括号，<code>react-i18next</code> 用双花括号），支持以下选项：</p><ul><li><code>auto</code>: 跟随所选国际化框架默认行为</li><li><code>single</code>: 使用单花括号语法</li><li><code>double</code>: 使用双花括号语法</li></ul><h2 id="i18n-mage-i18nfeatures-namespaceseparator" tabindex="-1"><code>i18n-mage.i18nFeatures.namespaceSeparator</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-namespaceseparator" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.namespaceSeparator`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>enum</code></li><li><strong>默认值</strong>: <code>auto</code></li></ul><p>设置国际化命名空间分隔符，默认跟随所选国际化框架（如 <code>vue-i18n</code> 用<code>.</code>，<code>react-i18next</code> 用<code>:</code> ），支持以下选项：</p><ul><li><code>auto</code>: 跟随所选国际化框架默认行为</li><li><code>.</code>: 使用 <code>.</code> 分隔符</li><li><code>:</code>: 使用 <code>:</code> 分隔符</li></ul><h2 id="i18n-mage-i18nfeatures-defaultnamespace" tabindex="-1"><code>i18n-mage.i18nFeatures.defaultNamespace</code> <a class="header-anchor" href="#i18n-mage-i18nfeatures-defaultnamespace" aria-label="Permalink to &quot;`i18n-mage.i18nFeatures.defaultNamespace`&quot;">​</a></h2><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>默认值</strong>: <code>translation</code></li></ul><p>指定默认命名空间，用于简化像 react-i18next 和 i18next 等框架中的 t 函数调用。若未显式指定命名空间，系统将默认使用此命名空间。请确保该命名空间已正确加载。</p>',23)])])}const p=o(t,[["render",c]]);export{g as __pageData,p as default};
